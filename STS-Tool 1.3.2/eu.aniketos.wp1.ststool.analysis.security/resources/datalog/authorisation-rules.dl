%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%% authorization rules %%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% the action authorise(R1,R2,I,G,Op,T) passes some authority on I (as specified in Op and t)
%%% starting from an actor that is either the owner or should have the right to pass authority to others (t=transferable)
%%% so it influences hasAuthority 	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%% authorise refers to the actual authorization relation from R1 to R2 %%%%%%%%%%
authorise(R1,R2,I,G1,U,M,P,Di,T) :- authorise(R1,R2,I,G,U,M,P,Di,T), subgoal(G1,G,R2).
authorise(R1,R2,I1,G,U,M,P,Di,T) :- authorise(R1,R2,I,G,U,M,P,Di,T), partOfI(I1,I).

hasAuthority(R2,U,M,P,Di,I,G,T):- authorise(R1,R2,I,G,U,M,P,Di,T).

% hasAuthority(R,U,M,P,Di,I,G1,T) :- hasAuthority(R,U,M,P,Di,I,G,T), subgoal(G1,G,R). 
% hasAuthority(R,U,M,P,Di,I1,G,T) :- hasAuthority(R,U,M,P,Di,I,G,T), partOfI(I1,I).

%%% to pas authority when the authorisee has no goals 
hasAuthority(R2,U,M,P,Di,I,all_goals,T):- authorise(R1,R2,I,G,U,M,P,Di,T), not has(R2,G). 

% authorise(R1,R2,U,M,P,Di,I,all_goals,T)  
% generated by the tool if the authorisation has no scope and the authorisee has no goals 
 
hasAuthority(R,1,1,1,1,I,G,1) :- own(R,I), has(R,G).
% to say for every goal, for the cases when R has no goals
hasAuthority(R,1,1,1,1,I,all_goals,1) :- own(R,I), 0=#count{G: has(R,G)}. 
%%% owner has full rights on operations and transferability %%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%% define goal-document relationships %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% can_use: refers to the need relationship in social view to the document representing information I %%%%%
can_use(R,I,D,G) :- has(R,G), need(R,D,G), madeTangibleBy(I,D). 
%can_use(R,I,D,G) :- can_use(R,I,D1,G), partOfD(D1,D).

%%% to use (read) a document, the actor should have the authority to use the information %%%%%%%%%%%%%%
has_authority_to_use(R,I) :- hasAuthority(R,1,_,_,_,I,_,_).
%%% has_authority_to_use(R,I,G1) :- has_authority_to_use(R,I,G), subgoal(G1,G,R). 
%%% it's enough to have the right to use (read) information, that's why U is 1 %%%%%%%%%%%%%%%%%%%%%

%%% can_modify: refers to the modify relationship in social view to the document representing information I %%%%%%
can_modify(R,I,D,G) :- has(R,G), modify(R,D,G), madeTangibleBy(I,D).
%can_modify(R,I,D,G) :- can_modify(R,I,D1,G), partOfD(D1,D).

%%% to modify (read) a document, the actor should have the authority to modify the information %%%%%%%%%%%%%
has_authority_to_modify(R,I) :- hasAuthority(R,_,1,_,_,I,_,_).
%%% m is 1, because the right to modify is passed to R %%%%%%%%%

%%% can_produce: refers to the produce relationship in social view of the document representing information I %%%%
can_produce(R,I,D,G):- has(R,G), produce(R,D,G), madeTangibleBy(I,D). 

has_authority_to_produce(R,I) :- hasAuthority(R,_,_,1,_,I,_,_).
%%% P is 1 as the authority to produce information is passed to R %%%%

%%% can_distribute: refers to the provision relationship in social view of the document representing information I %%%%
can_distribute(R,I,D):- can_provide(R,_,D), madeTangibleBy(I,D). %, has(R1,G). 
%can_distribute(R,I,D) :- can_distribute(R,I,D1), partOfD(D1,D).

has_authority_to_distribute(R,I) :- hasAuthority(R,_,_,_,1,I,_,_).
%%% Di is 1 as the authority to distribute information is passed to R, 

- has_authority_to_authorise(R,I) :- hasAuthority(R,_,_,_,_,I,_,0).
%%% T is 1 as the authority to transfer authorisations is passed to R, 

%%% ntk 	%%%
scope_g(R,I,G) :- hasAuthority(R,_,_,_,_,I,G,_).
- scope_g(R,I,G) :- hasAuthority(R,_,_,_,_,I,G1,_), has(R,G), has(R,G1), G != G1, 0=#count{G2: hasAuthority(R,_,_,_,_,I,G2,_), G2 = G}. 

authorise_usage(R1,R2,I) :- authorise(R1,R2,I,_,1,_,_,_,_).
- authorise_usage(R1,R2,I) :- authorise(R1,R2,I,_,0,_,_,_,_).

authorise_modification(R1,R2,I) :- authorise(R1,R2,I,_,_,1,_,_,_).
- authorise_modification(R1,R2,I) :- authorise(R1,R2,I,_,_,0,_,_,_).

authorise_production(R1,R2,I) :- authorise(R1,R2,I,_,_,_,1,_,_).
- authorise_production(R1,R2,I) :- authorise(R1,R2,I,_,_,_,0,_,_).

authorise_distribution(R1,R2,I) :- authorise(R1,R2,I,_,_,_,_,1,_).
- authorise_distribution(R1,R2,I) :- authorise(R1,R2,I,_,_,_,_,0,_).

authorise_transferibility(R1,R2,I) :- authorise(R1,R2,I,_,_,_,_,_,1).
- authorise_transferibility(R1,R2,I) :- authorise(R1,R2,I,_,_,_,_,_,0).


